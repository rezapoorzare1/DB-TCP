/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*

 * Author: Reza Poorzare <reza.poorzare@upc.edu>
 *
 * Anna Calveras <anna.calveras@upc.edu>, Supervisor

 */

#include "tcp-deep.h"
#include "ns3/log.h"
#include <iostream>
#include <fstream>
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdint.h>
using namespace std;


namespace ns3 {

NS_LOG_COMPONENT_DEFINE ("Tcpdeep");
NS_OBJECT_ENSURE_REGISTERED (Tcpdeep);

TypeId
Tcpdeep::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::Tcpdeep")
    .SetParent<TcpNewReno> ()
    .AddConstructor<Tcpdeep> ()
    .SetGroupName ("Internet")

  ;
  return tid;
}

Tcpdeep::Tcpdeep (void)
  : TcpNewReno (),
    m_baseRtt (Time::Max ()),
    m_minRtt (Time::Max ()),
    m_cntRtt (0),
    m_doingdeepNow (true),
    m_begSndNxt (0)
{
  NS_LOG_FUNCTION (this);
}

Tcpdeep::Tcpdeep (const Tcpdeep& sock)
  : TcpNewReno (sock),

    m_baseRtt (sock.m_baseRtt),
    m_minRtt (sock.m_minRtt),
    m_cntRtt (sock.m_cntRtt),
    m_doingdeepNow (true),
    m_begSndNxt (0)
{
  NS_LOG_FUNCTION (this);
}

Tcpdeep::~Tcpdeep (void)
{
  NS_LOG_FUNCTION (this);
}

Ptr<TcpCongestionOps>
Tcpdeep::Fork (void)
{
  return CopyObject<Tcpdeep> (this);
}

uint32_t NN_output=0;
uint32_t congestionCounter1=0;
uint32_t fixCounter1=0;

uint64_t averagecounter=-1;
double avgtemp1=0;
double avgtemp2=0;
double avgtemp3=0;
double averagertt = 0;

  static uint32_t diff;
double nor_diff;

  static double targetcwndvscwnd;
  static double tmp;


  static double sentrtt;

static double currentThroughput;
uint32_t maxTempCwnd1=0;
uint32_t convergenceCounter1=0;
uint32_t divergenceCounter1=0;

uint32_t n1,m1;
uint32_t n2,m2;
uint32_t b2;

uint32_t n3,m3;
uint32_t b3;

uint32_t n4,m4;
uint32_t b4;

uint32_t n5,m5;
uint32_t b5;



uint32_t i1, j1;
uint32_t i2, j2;
uint32_t i3, j3;
uint32_t i4, j4;
uint32_t i5, j5;


uint32_t out_r1,out_c1;
uint32_t out_r2,out_c2;
uint32_t out_r3,out_c3;
uint32_t out_r4,out_c4;


uint32_t p1,o1;
uint32_t p2,o2;
uint32_t p3,o3;
uint32_t p7,o7;
uint32_t p4,o4;
uint32_t p8,o8;

uint32_t x2,v2;
uint32_t c2,d2;
uint32_t f2,g2;

uint32_t ii,jj,kk;
uint32_t iii,jjj,kkk;
uint32_t iiii,jjjj,kkkk;
uint32_t iiiii,jjjjj,kkkkk;

uint32_t final_output;


double temp1, temp2, temp3, temp4;
double q=0;

double
Tcpdeep::setThreshold(double th){


currentThroughput=th;
return sentrtt;
}



double
Tcpdeep::returnrtt(){



return sentrtt;
}


double
Tcpdeep::returntmp(){



return tmp;
}



double
Tcpdeep::returntargetedvscwnd(){



return targetcwndvscwnd;
}




double
Tcpdeep::returndiff(){



return diff;
}




void
Tcpdeep::PktsAcked (Ptr<TcpSocketState> tcb, uint32_t segmentsAcked,
                     const Time& rtt)
{
  NS_LOG_FUNCTION (this << tcb << segmentsAcked << rtt);

  if (rtt.IsZero ())
    {
      return;
    }

  m_minRtt = std::min (m_minRtt, rtt);
  NS_LOG_DEBUG ("Updated m_minRtt = " << m_minRtt);

  m_baseRtt = std::min (m_baseRtt, rtt);
  NS_LOG_DEBUG ("Updated m_baseRtt = " << m_baseRtt);

  // Update RTT counter
  m_cntRtt++;
  NS_LOG_DEBUG ("Updated m_cntRtt = " << m_cntRtt);
}

void
Tcpdeep::Enabledeep (Ptr<TcpSocketState> tcb)
{
  NS_LOG_FUNCTION (this << tcb);

  m_doingdeepNow = true;
  m_begSndNxt = tcb->m_nextTxSequence;
  m_cntRtt = 0;
  m_minRtt = Time::Max ();
}

void
Tcpdeep::Disabledeep ()
{
  NS_LOG_FUNCTION (this);

  m_doingdeepNow = false;
}

void
Tcpdeep::CongestionStateSet (Ptr<TcpSocketState> tcb,
                              const TcpSocketState::TcpCongState_t newState)
{
  NS_LOG_FUNCTION (this << tcb << newState);
  if (newState == TcpSocketState::CA_OPEN)
    {
      Enabledeep (tcb);
    }
  else
    {
      Disabledeep ();
    }
}

void
Tcpdeep::IncreaseWindow (Ptr<TcpSocketState> tcb, uint32_t segmentsAcked)
{
  NS_LOG_FUNCTION (this << tcb << segmentsAcked);

  if (!m_doingdeepNow)
    {
      // If deep is not on, we follow NewReno algorithm
      NS_LOG_LOGIC ("deep is not turned on, we follow NewReno algorithm.");
      TcpNewReno::IncreaseWindow (tcb, segmentsAcked);
      return;
    }

  if (tcb->m_lastAckedSeq >= m_begSndNxt)
    { // A deep cycle has finished, we do deep cwnd adjustment every RTT.

      NS_LOG_LOGIC ("A deep cycle has finished, we adjust cwnd once per RTT.");

      // Save the current right edge for next deep cycle
      m_begSndNxt = tcb->m_nextTxSequence;

      /*
       * We perform deep calculations only if we got enough RTT samples to
       * insure that at least 1 of those samples wasn't from a delayed ACK.
       */
      if (m_cntRtt <= 2)
        {  // We do not have enough RTT samples, so we should behave like Reno
          NS_LOG_LOGIC ("We do not have enough RTT samples to do deep, so we behave like NewReno.");
          TcpNewReno::IncreaseWindow (tcb, segmentsAcked);
        }
      else
        {
          NS_LOG_LOGIC ("We have enough RTT samples to perform deep calculations");
          /*
           * We have enough RTT samples to perform deep algorithm.
           * Now we need to determine if cwnd should be increased or decreased
 
           */

         
          double targetCwnd;
          double segCwnd = tcb->GetCwndInSegments ();

          //Layer 1:
//Dimensions of the layers. 
n1=1;
m1=5;

//Layer 2:
n2=5;
m2=20;
b2=20;

//Layer 3:
n3=20;
m3=25;
b3=25;

//Layer 4:
n4=25;
m4=20;
b4=20;

//Layer 5:
n5=20;
m5=3;
b5=3;



 i1=n1;
 j1=m1;

 i2=n2;
 j2=m2;

 i3=n3;
 j3=m3;

 i4=n4;
 j4=m4;

 i5=n5;
 j5=m5;


 out_r1=1;
 out_c1=m2;
 out_r2=1;
 out_c2=m3;
 out_r3=1;
 out_c3=m4;
 out_r4=1;
 out_c4=m5;



//Layer 4 inputs:
typedef double Matrix4[i4][j4];
 
Matrix4 mat4 = { { -3.3785832e+00, -9.1135554e-02, -4.0014505e+00,  4.0341458e+00,
         5.7558980e+00,  4.5396242e+00,  4.8423505e+00,  6.4640832e+00,
         6.9754348e+00, -4.0556526e+00, -1.1052726e-01, -3.2438195e+00,
         4.4186239e+00,  5.0101280e+00, -3.3678532e+00,  2.8183925e-01,
         5.3808212e+00, -2.2414407e-01, -3.8525810e+00, -3.2130616e+00},
                         { -1.2241553e+00,  6.0587966e-01, -1.3091642e+00,  1.4428777e+00,
         1.7644593e+00,  6.6794622e-01,  6.1581630e-01,  2.4986408e+00,
         3.0527046e+00, -1.7100886e+00,  1.0848160e+00, -1.5303446e+00,
         1.1052351e+00,  1.3680123e+00, -1.0916045e+00,  3.1195142e+00,
         1.4693182e+00, -4.3553716e-01, -1.2891014e+00, -1.6900247e+00},
                         { 1.4375718e+00,  5.7273942e-01, -4.4365302e-01,  2.2158954e-01,
        -1.0063357e-02, -6.7078896e-02, -1.4114545e-01, -2.2076973e-01,
        -1.1941920e-01,  1.0152134e-01,  3.5356942e-01,  1.9486028e+00,
         1.1171284e-01, -1.0645981e+00,  1.1926628e+00,  2.7654562e-02,
        -1.0275367e+00,  4.4517139e-01,  1.4024574e+00,  1.4796226e+00},
                         { -3.4005733e+00, -1.5396339e-01, -3.4219482e+00,  4.0083890e+00,
         4.8702850e+00,  4.1372123e+00,  4.2773027e+00,  5.4816051e+00,
         5.5982108e+00, -3.9918616e+00,  5.4090363e-01, -2.8539412e+00,
         3.2542527e+00,  4.7737451e+00, -3.2209342e+00,  7.0504087e-01,
         4.6247015e+00,  1.7557642e-01, -3.1490591e+00, -3.1204772e+00},
                         { -1.4593704e+00, -2.5829559e-02, -1.5653465e+00,  1.6306853e+00,
         2.4894960e+00,  7.1437514e-01,  1.2476532e+00,  2.8477938e+00,
         3.1618743e+00, -2.2958617e+00,  1.4538574e+00, -1.3395588e+00,
         1.4596292e+00,  1.3102704e+00, -1.4530255e+00,  3.6185186e+00,
         1.5798676e+00, -2.3254912e-01, -1.6025624e+00, -1.5575025e+00},
                         { -8.2246438e-03, -3.2854540e+00, -1.0228715e-02,  1.0860179e-01,
         5.9843993e-01,  5.9852980e-02, -1.5505529e-02,  6.0221964e-01,
         7.7808964e-01, -2.2122057e-02, -3.0343184e+00,  2.4964837e-02,
         9.4208425e-01, -6.5329090e-02,  2.7808094e-02, -2.7632370e+00,
        -8.4709711e-02, -2.2638028e+00,  4.5081452e-02,  4.3707743e-02},
                         { -2.2353923e+00,  2.3594259e-01, -2.5445082e+00,  2.7041686e+00,
         3.5377736e+00,  2.8262584e+00,  2.8328059e+00,  4.1682301e+00,
         4.7717957e+00, -2.8121243e+00,  6.5530002e-01, -2.4818602e+00,
         2.6203580e+00,  3.4895792e+00, -2.6237049e+00,  2.4836898e+00,
         3.1007047e+00, -1.4914903e-01, -2.7507491e+00, -2.6096773e+00},
                         { -2.6358514e+00, -7.9927474e-01, -2.4832425e+00,  2.8632078e+00,
         3.2847176e+00,  3.2861071e+00,  3.3173571e+00,  3.5520027e+00,
         4.2018862e+00, -2.5074818e+00,  6.3175589e-01, -2.3482471e+00,
         2.7288144e+00,  3.7880218e+00, -2.5854554e+00,  3.2678034e+00,
         3.0960252e+00, -6.0979515e-01, -2.8629458e+00, -2.8601029e+00},
                         { -5.4835367e-01,  9.3791914e-01, -1.4431077e+00,  1.2989426e+00,
        -1.5901140e+00,  8.6308964e-02,  5.9955275e-01,  1.7770977e-01,
        -3.4477848e-01, -2.7074468e+00,  6.2000161e-01, -1.6596591e+00,
        -7.9380912e-01,  5.2880472e-01, -6.2054282e-01, -7.2709188e-02,
         6.7002237e-02,  6.3534182e-01, -6.1669028e-01, -4.6658045e-01},
                         { -1.3810877e+00, -8.6180761e-02, -1.5309100e+00,  1.0241877e+00,
         2.4887798e+00,  1.5644464e+00,  1.9720417e+00,  3.2361944e+00,
         3.4132538e+00, -2.2014821e+00,  1.0868154e+00, -1.5929561e+00,
         1.9492275e+00,  1.1956636e+00, -1.5580264e+00,  2.6716676e+00,
         1.4314464e+00, -6.5112305e-01, -1.4540107e+00, -1.6785442e+00},
                         { -5.2343145e-02, -2.7513132e+00, -2.3365092e-02, -6.7833193e-02,
         1.0453324e+00, -1.6938157e-02,  7.7812202e-02,  1.0711263e+00,
         9.3399650e-01,  2.1582225e-02, -2.2434001e+00, -3.1599727e-02,
         1.0481249e+00, -2.8186515e-01, -3.4190163e-02, -2.0312104e+00,
        -1.4370629e-02, -2.9104073e+00, -6.9675967e-02,  1.7385292e-03},
                         {  6.3300133e-03, -3.0515468e+00,  7.7595334e-03, -1.1117829e-02,
         9.8704582e-01,  1.0690811e-01, -4.4393454e-02,  7.1273708e-01,
         8.0000085e-01,  7.8494951e-02, -2.7017984e+00, -2.6569379e-02,
         8.4648937e-01, -3.9611802e-02, -2.1309255e-02, -2.0918407e+00,
         1.6080497e-02, -2.4431751e+00,  3.3204727e-02,  2.0419568e-02},
                         { 7.6636076e-01,  3.9699057e-01, -6.2602991e-01,  6.6681778e-01,
        -4.6230920e-02,  2.2611997e-01, -8.6068869e-02, -5.1692694e-01,
        -7.7560186e-02, -9.0720153e-01,  4.4017258e-01,  1.2800857e+00,
        -4.7380220e-02, -1.5615932e+00,  9.4738144e-01,  1.6701373e-01,
        -1.6429703e+00,  5.2419698e-01,  5.3675419e-01,  8.8563544e-01},
                         { 1.1427063e+00,  5.6991351e-01, -2.4788165e+00,  1.1423832e+00,
        -7.8450072e-01, -6.1696899e-01, -8.7362427e-01, -1.1531386e+00,
        -8.4927547e-01, -2.1178365e+00,  1.3188195e+00,  7.7840644e-01,
        -9.8738998e-01, -1.9753323e+00,  9.9094957e-01,  6.2495488e-01,
        -2.6106012e+00,  1.5642062e+00,  8.9732051e-01,  7.7116293e-01},
                         { -2.9884388e+00,  4.1333696e-01, -3.6280985e+00,  4.0465078e+00,
         4.5166569e+00,  4.4085908e+00,  4.4536657e+00,  5.3447819e+00,
         6.0594964e+00, -3.6522629e+00,  2.7829099e-01, -3.1741843e+00,
         3.6608083e+00,  4.0572591e+00, -3.2181106e+00,  1.2571559e+00,
         4.0919504e+00, -1.4104731e-01, -3.2592702e+00, -3.4568319e+00},
                         { -2.9884388e+00,  4.1333696e-01, -3.6280985e+00,  4.0465078e+00,
         4.5166569e+00,  4.4085908e+00,  4.4536657e+00,  5.3447819e+00,
         6.0594964e+00, -3.6522629e+00,  2.7829099e-01, -3.1741843e+00,
         3.6608083e+00,  4.0572591e+00, -3.2181106e+00,  1.2571559e+00,
         4.0919504e+00, -1.4104731e-01, -3.2592702e+00, -3.4568319e+00},
                         { 6.0065913e-01,  2.8828877e-01, -1.0280415e+00,  4.6165204e-01,
         1.9754225e-02, -3.1210631e-01, -1.6973299e-01, -7.5614661e-01,
        -1.2249075e-01, -1.3198476e+00,  4.2578667e-01,  1.7403973e+00,
        -2.7554524e-01, -1.7938896e+00,  1.1171490e+00,  2.8348115e-01,
        -2.8068032e+00,  6.0782677e-01,  5.8349079e-01,  1.3434327e+00},
                         { -2.0664890e-01,  4.8112443e-01, -5.4633265e+00,  2.2750065e+00,
        -1.8296428e+00,  3.7557993e-02,  2.8684440e-01, -2.9515326e-01,
        -9.7730649e-01, -4.4834375e+00,  1.3941263e+00, -3.3362961e-01,
        -1.4674846e+00,  2.2817782e-01, -1.7615202e-01,  1.5519537e+00,
         4.9612779e-02,  1.1003497e+00, -1.5142716e-01, -2.4710345e-01},
                         { -7.0739579e-01,  4.9529083e-02, -7.8355700e-01,  1.5351312e+00,
         1.9854355e+00,  1.8683257e+00,  1.7036839e+00,  1.1522636e+00,
         1.7542603e+00, -4.9011031e-01,  5.3461361e-01, -9.0221721e-01,
         1.6103005e+00,  1.1365306e+00, -1.3400310e+00,  2.6531808e+00,
         7.1747512e-01, -4.4737837e-01, -1.1704018e+00, -1.3727210e+00},
                         { -7.8455009e-02, -2.8092527e-01,  1.2167994e-01, -8.2329981e-02,
         3.8393191e-01,  1.2231090e-01,  3.5165662e-01, -5.0082904e-01,
         4.0780045e-02, -1.9598681e-01,  1.0994632e-01, -3.0477050e-01,
         1.4484896e-01, -2.2822791e-01, -1.7814121e-01, -4.1809613e-03,
         5.6671076e-02, -2.0469497e-01,  3.2051486e-01,  4.9989480e-01},
                         { -3.0534487e-02, -2.8350744e+00,  3.4638951e-03, -1.1158465e-01,
         8.4042412e-01,  1.0572226e-01,  7.0216968e-03,  1.2366012e+00,
         8.2811242e-01,  5.0506931e-02, -2.3915396e+00, -7.9506949e-02,
         7.0991999e-01, -9.5651476e-03, -6.7671396e-02, -1.3654660e+00,
         1.0950425e-01, -2.4078207e+00, -8.6801596e-02, -5.1521897e-02},
                         { -3.3409854e-03, -3.3904948e+00, -5.9692062e-02,  6.8371132e-02,
         7.3562610e-01,  1.6789661e-03, -9.1914371e-02,  8.7166739e-01,
         6.7625058e-01,  4.7202021e-02, -2.0586491e+00, -8.6870521e-02,
         7.9209524e-01, -1.0719537e-01,  7.4523208e-03, -1.2816000e+00,
         1.8061517e-01, -2.4874005e+00, -5.9535023e-02, -3.7162799e-02},
                         { 1.0486367e+00,  6.1793592e-02, -2.2939949e-01,  1.5108465e-01,
         1.4176331e-01, -1.7396864e-01, -4.4311729e-01, -4.7964078e-01,
         9.7558782e-02, -3.1162569e-01, -7.9537056e-02,  1.4781736e+00,
         1.9998426e-02, -4.9481887e-01,  1.2350972e+00, -3.1113401e-01,
        -5.7059985e-01, -1.2496067e-01,  1.1473978e+00,  1.4954718e+00},
                         { -1.6680463e-01,  1.2393553e+00, -6.3247495e+00,  3.4980106e+00,
        -1.9502608e+00,  9.5551294e-01,  8.6747622e-01, -1.2695953e+00,
        -1.4731119e+00, -5.2494264e+00,  2.9345741e+00, -5.6142473e-01,
        -1.9329171e+00, -1.2450859e-01, -3.0601168e-01,  2.8800194e+00,
        -5.9620297e-01,  1.4507614e+00, -3.4140748e-01, -2.5537372e-01},
                         { -1.6106063e+00,  4.1922033e-01, -1.3046497e+00,  1.3410380e+00,
         1.7010387e+00,  1.1825827e+00,  1.4867985e+00,  2.7713709e+00,
         2.6540563e+00, -1.8729700e+00,  1.3763525e+00, -1.6946329e+00,
         1.6183698e+00,  2.0030284e+00, -1.6629416e+00,  3.1487675e+00,
         1.4467138e+00, -6.9009453e-01, -1.4078368e+00, -1.6767563e+00},
};


   







typedef double out10[out_r1][out_c1];
  out10 out1;

typedef double out12[out_r2][out_c2];
  out12 out2;

typedef double outf1[out_r1][out_c1];
  outf1 final_out1;

typedef double outf2[out_r2][out_c2];
  outf2 final_out2;


typedef double out14[out_r3][out_c3];
  out14 out3;

typedef double out40[out_r3][out_c3];
  out40 final_out3;



typedef double out15[out_r4][out_c4];
  out15 out4;

typedef double out50[out_r4][out_c4];
  out50 final_out4;



          /*
           * little trick:
           * desidered throughput is currentCwnd * baseRtt
           */

        

  
          targetCwnd = static_cast<uint32_t> (segCwnd * tmp);
          NS_LOG_DEBUG ("Calculated targetCwnd = " << targetCwnd);
          NS_ASSERT (segCwnd >= targetCwnd);          





         sentrtt = m_minRtt.GetSeconds ();



          tmp = m_baseRtt.GetSeconds () / m_minRtt.GetSeconds ();





          targetcwndvscwnd=  (targetCwnd/segCwnd);

       

          diff = segCwnd - targetCwnd;

   





//*******************************



           if (segCwnd  < 900)
//< tcb->m_ssThresh)
            {     // Slow start mode

//std::cout << "In Slow Start" << std::endl;
              NS_LOG_LOGIC ("We are in slow start.");



//std::cout<< "diff " << diff << std::endl;

                 segCwnd = 2 * segCwnd ;
                  tcb->m_cWnd = segCwnd * tcb->m_segmentSize;



            }
          else
            {     
           


averagecounter=averagecounter+1; 

        if (averagecounter==3){
        averagecounter=0;
        }

        if (averagecounter == 0){

avgtemp1=sentrtt;


}

        if (averagecounter == 1){
avgtemp2=sentrtt;

}

        if (averagecounter == 2){
avgtemp3=sentrtt;

}

averagertt = (avgtemp1+avgtemp2+avgtemp3)/3;

std::cout << "avgtem1= " << avgtemp1 << std::endl;
std::cout << "avgtem2= " << avgtemp2 << std::endl;
std::cout << "avgtem3= " << avgtemp3 << std::endl;    
std::cout << "RTT average= " << averagertt << std::endl; 



         
           std::cout << "RTT " <<  sentrtt <<std::endl;


           
           std::cout << "tmp " <<  tmp <<std::endl;



        std::cout << "targetcwnd/cwnd= " <<   targetcwndvscwnd << std::endl;



  std::cout << "diff = " <<   diff << std::endl;


nor_diff=diff/1759;



typedef double Matrix1[i1][j1];

//Layer 1 inputs:
const Matrix1 mat1 = {
        {sentrtt, tmp,	targetcwndvscwnd,	nor_diff	,averagertt}
};




//Layer2 matrix.
typedef double Matrix2[i2][j2];
const Matrix2 mat2 = { 
        { -1.43503889e-01, -4.09237772e-01,  2.49475551e+00,
         1.43450487e+00,  5.71614206e-01, -1.44682837e+00,
        -4.60674673e-01, -1.19834948e+00,  2.85572529e+00,
        -2.74672389e-01,  2.10453176e+00, -1.01236725e+00,
        -1.38858616e+00,  2.34006238e+00, -1.52586675e+00,
        -1.75579739e+00, -1.63252965e-01, -3.18571508e-01,
         1.83122373e+00, -1.56734204e+00},
                         { 1.06783852e-01,  8.89256969e-02, -7.56550610e-01,
        -7.58639157e-01,  6.69185892e-02,  1.25678706e+00,
        -5.83220840e-01,  1.19867063e+00, -6.13004386e-01,
        -8.44513178e-02, -3.99325490e-01,  3.84229064e-01,
         1.11075354e+00, -7.45212197e-01,  1.20881593e+00,
        -8.70180130e-01, -2.21682876e-01, -1.18284857e+00,
        -1.01602650e+00,  4.99200314e-01},
                         { -2.80641437e-01, -2.73591727e-01, -8.91615264e-03,
         1.63856491e-01, -6.88925534e-02,  2.13485211e-02,
         9.90571678e-02,  1.06423413e-02,  6.38808543e-03,
        -8.08476210e-02, -3.06313345e-03,  4.27335560e-01,
         2.25299541e-02, -1.24924136e-02,  1.12472195e-02,
        -1.54244304e+00,  4.03230544e-03, -6.98167801e-01,
        -5.03187776e-02,  2.20472947e-01},
                         { -9.89486724e-02, -2.61710018e-01,  5.97856892e-03,
         1.90950751e-01, -3.54556680e-01,  6.17647870e-03,
        -1.14067890e-01, -5.59335900e-03,  4.89127077e-03,
         1.06389020e-02,  9.01102945e-02, -3.35970402e-01,
         9.28559923e-04, -2.11768993e-03,  8.06057360e-03,
        -9.60252702e-01, -2.97145937e-02, -4.74515557e-01,
        -1.38384746e-02, -2.29674414e-01},
                         { 2.69126669e-02,  5.29786646e-01,  1.48679471e+00,
         4.92990799e-02, -3.71502548e-01,  1.07546508e-01,
         3.95386606e-01,  5.60130887e-02,  2.61880726e-01,
        -4.56561565e-01,  2.21117157e-02,  2.23036122e+00,
        -1.37304634e-01,  1.57012534e+00,  6.29785210e-02,
        -1.65665686e+00, -1.86299667e-01, -5.73903024e-01,
        -1.00069332e+00,  2.00983620e+00},

};



 for (ii = 0; ii < n1; ii++) {
        for (jj = 0; jj < m2; jj++) {
            out1[ii][jj] = 0;
            for (kk = 0; kk < m1; kk++)
                out1[ii][jj] += mat1[ii][kk] * mat2[kk][jj]; 
        }
    }






typedef double b2[1][b2];
const b2 bias2 = {  
{ 0.0000000e+00,  0.0000000e+00, -1.1582887e-03, -5.3879209e-03,
       -2.8552691e-02, -3.3488110e-01,  0.0000000e+00, -3.1759822e-01,
       -3.6911326e-03,  0.0000000e+00,  8.5765824e-02, -7.1238601e-01,
       -2.6847497e-01,  3.3158774e-03, -3.0855522e-01,  1.3514863e+00,
        0.0000000e+00,  9.7799468e-01,  3.2512310e-01, -6.2382561e-01}, 
    }; 




        for(p1=0; p1<out_r1; ++p1) {
                    for(o1=0; o1<out_c1; ++o1){
                            temp1=out1[p1][o1] + bias2[p1][o1]; 
                        final_out1[p1][o1]=max(q,temp1);
                    }
            }




typedef double Matrix3[i3][j3];
const Matrix3 mat3 = {  { -2.88586300e-02, -1.52555898e-01, -3.29532176e-01,
        -1.57146126e-01,  1.31401075e-02,  6.09250851e-02,
         1.52504951e-01,  1.12067483e-01, -2.85162866e-01,
        -1.79278612e-01,  1.12868585e-01, -1.35011971e-01,
        -9.64335725e-02, -1.82975218e-01, -2.31833726e-01,
         1.59496233e-01, -4.07220900e-01,  3.43049109e-01,
         2.16792881e-01, -6.17458113e-03, -7.80763552e-02,
        -5.33706360e-02, -1.75542552e-02, -2.03491244e-02,
        -2.07500771e-01},
                         { 1.95240617e-01,  9.71336197e-03,  8.93919542e-02,
        -1.41725652e-02, -6.04743809e-02, -1.59221783e-01,
         2.03970984e-01, -3.99559885e-01,  2.30856434e-01,
        -8.69075730e-02,  1.35286763e-01, -1.27394319e-01,
         1.20170288e-01,  9.24483389e-02, -2.60349125e-01,
         7.54178464e-02, -2.31686056e-01,  1.89475730e-01,
        -1.96643740e-01, -3.79459202e-01, -2.56657768e-02,
        -4.57110316e-01, -1.29208229e-02, -3.68557960e-01,
         9.62322354e-02},
                         { -8.62895429e-01, -8.67961347e-01,  4.41249609e+00,
        -7.19563901e-01, -7.78195739e-01, -3.67309660e-01,
        -1.00305915e+00, -8.26383829e-01,  5.38122773e-01,
        -7.97550917e-01, -1.22071505e+00, -1.85181201e-01,
         4.30066109e+00,  2.03912616e+00, -6.54673755e-01,
         4.83571863e+00,  3.86029720e+00,  1.20779037e+00,
        -1.46646810e+00, -2.48108849e-01, -1.66856849e+00,
        -1.38478518e+00,  4.72106409e+00,  9.37781751e-01,
        -8.99147928e-01},
                         { -9.83437777e-01, -1.94826019e+00,  5.25871515e-01,
        -7.42313266e-01, -1.87817883e+00,  1.80437174e-02,
        -1.15001512e+00, -9.58429277e-01, -3.52180302e-01,
        -1.99145353e+00, -4.62434404e-02,  1.99119467e-02,
         3.87185782e-01,  4.79049459e-02, -6.39895797e-01,
         1.96910262e-01,  2.48513594e-01, -5.34227639e-02,
        -2.54209042e+00, -3.12062167e-02, -2.87500806e-02,
        -4.29419316e-02,  9.14637446e-01,  1.65567130e-01,
        -1.50820208e+00},
                         { -1.32011011e-01,  4.24250588e-02,  1.43135488e-01,
         2.90418148e-01,  2.67192006e-01, -2.72745699e-01,
        -3.16315770e-01,  4.64721955e-03,  3.27243119e-01,
        -7.97695741e-02,  3.48041803e-02, -3.71558577e-01,
        -3.72944176e-02,  4.08167899e-01,  7.89137781e-02,
        -1.72357902e-01,  2.11342275e-01,  1.01133861e-01,
         2.06815794e-01, -5.63078858e-02,  2.28106524e-06,
        -2.64539272e-02, -8.46546590e-02, -4.28533414e-03,
        -1.09391205e-01},
                         { 5.91965066e-03, -2.27072254e-01, -1.38966048e+00,
         1.00089145e+00,  1.57299638e-02,  6.38204813e-01,
        -6.20527985e-03, -2.72651967e-02, -3.94299746e+00,
         5.68812430e-01,  2.71842182e-01,  5.11384010e-01,
        -1.76473367e+00, -3.12886143e+00, -2.49829721e-02,
        -1.79194438e+00, -2.03265738e+00, -4.58832836e+00,
        -2.08544046e-01, -1.94038600e-02,  9.71805751e-02,
         2.46884733e-01, -7.16819048e-01, -4.49067783e+00,
        -1.12432696e-01},
                         { -4.47173975e-02,  4.53218609e-01,  1.00717954e-01,
         4.76315975e-01,  1.15680657e-02,  5.32548595e-03,
        -2.71433741e-01, -1.89747021e-01, -9.39667523e-02,
        -1.70794725e-01,  4.95783389e-02,  6.22999705e-02,
         1.45987943e-01,  3.82657014e-02, -3.41827542e-01,
         2.33800292e-01,  5.83364721e-03,  2.69118577e-01,
         6.63750917e-02,  6.91199973e-02,  2.65833199e-01,
        -4.46991593e-01,  2.00357094e-01, -1.00254074e-01,
        -3.05873156e-01},
                         { 9.78586495e-01, -6.63340092e-02, -7.17965484e-01,
        -1.33416010e-02,  1.40311509e-01,  1.36126116e-01,
        -6.47676736e-03, -2.43188981e-02, -4.22120142e+00,
        -7.28768110e-02,  2.53284574e-01, -1.99360967e-01,
        -1.05028653e+00, -2.87639666e+00, -1.22753298e-02,
        -1.59649861e+00, -1.40693521e+00, -3.84905410e+00,
         5.62950894e-02, -1.88963026e-01,  1.82045892e-01,
         3.41159821e-01, -5.42461514e-01, -4.35024595e+00,
        -9.95615125e-020},
                         { 9.78586495e-01, -6.63340092e-02, -7.17965484e-01,
        -1.33416010e-02,  1.40311509e-01,  1.36126116e-01,
        -6.47676736e-03, -2.43188981e-02, -4.22120142e+00,
        -7.28768110e-02,  2.53284574e-01, -1.99360967e-01,
        -1.05028653e+00, -2.87639666e+00, -1.22753298e-02,
        -1.59649861e+00, -1.40693521e+00, -3.84905410e+00,
         5.62950894e-02, -1.88963026e-01,  1.82045892e-01,
         3.41159821e-01, -5.42461514e-01, -4.35024595e+00,
        -9.95615125e-02},
                         { 4.18387443e-01,  1.93209425e-01, -2.61614099e-02,
         1.24340191e-01, -1.79338232e-01, -2.25578904e-01,
        -3.28773618e-01,  9.57362205e-02, -2.06411242e-01,
        -3.10015261e-01,  2.99848914e-02,  6.25741929e-02,
        -1.66047439e-01,  1.84681833e-01,  3.27908874e-01,
        -4.56825495e-01, -1.75637767e-01, -2.24031284e-01,
        -4.11597013e-01, -7.18316734e-02,  4.09357734e-02,
         1.64538711e-01, -6.28313273e-02,  3.38407099e-01,
         2.29050100e-01},
                         { -1.08944988e+00, -2.72817779e+00, -8.72409567e-02,
        -1.08329201e+00, -3.26772738e+00,  1.79108232e-02,
        -1.28294039e+00, -1.71363974e+00, -9.35927108e-02,
        -3.05568743e+00,  1.97695103e-02,  2.05981005e-02,
        -2.19323533e-03,  9.83479619e-01, -8.69428933e-01,
         7.42974654e-02,  1.43361658e-01, -7.63003202e-03,
        -1.44059515e+00, -2.11070582e-01, -7.65040368e-02,
        -6.02493584e-02,  5.30063510e-01, -1.43202040e-02,
        -3.60763001e+00},
                         { 4.66747671e-01,  2.47468090e+00, -3.15872461e-01,
         4.86716986e-01,  2.75209904e+00,  3.81345105e+00,
         7.36583531e-01,  5.17553210e-01,  1.16281688e+00,
         1.53417563e+00,  4.80390549e+00,  4.45334911e+00,
        -1.67402780e+00, -1.39582121e+00,  3.59266281e-01,
        -2.80666947e+00, -1.27856994e+00, -2.10548282e+00,
         2.18141460e+00, -2.86084980e-01,  4.94576216e+00,
         4.15911818e+00, -1.07063733e-01, -1.44771373e+00,
         2.66346335e+00},
                         {9.37464181e-03, -4.10803892e-02, -8.17601919e-01,
         2.52409303e-03, -1.47198364e-01,  6.71905816e-01,
         9.89776909e-01,  7.97442198e-01, -3.40356088e+00,
        -5.03648892e-02, -1.50722235e-01,  5.72395325e-01,
        -1.34786403e+00, -2.24098468e+00, -5.08796386e-02,
        -1.42929280e+00, -1.45084369e+00, -3.07674193e+00,
         7.34956935e-03, -4.08130914e-01, -5.63839674e-02,
         1.94263667e-01, -4.03137416e-01, -3.10042644e+00,
        -3.79884727e-02},
                         { -5.82568407e-01, -1.74515140e+00,  3.33087897e+00,
        -7.22356439e-01, -1.45680368e+00, -4.70014364e-01,
        -1.06481159e+00, -1.35032535e+00, -4.55393866e-02,
        -1.48905981e+00, -1.00669384e+00, -6.30468667e-01,
         2.86046672e+00,  8.68200004e-01, -5.15112996e-01,
         3.15855932e+00,  2.32068944e+00,  8.94455850e-01,
        -2.22938681e+00, -6.79344963e-03, -1.47707164e+00,
        -1.17498314e+00,  3.57904768e+00,  9.85592782e-01,
        -1.77092659e+00},
                         { -1.15347384e-02,  2.49404952e-01, -1.20447254e+00,
        -4.41762879e-02, -9.67134954e-04,  3.80165517e-01,
        -3.99712799e-03, -1.42201707e-02, -4.39821434e+00,
        -5.85882589e-02,  3.57881010e-01,  2.15826377e-01,
        -1.67496586e+00, -3.19855952e+00,  9.73966360e-01,
        -1.96593451e+00, -1.84188366e+00, -4.29911232e+00,
        -1.65362373e-01, -1.20334454e-01,  1.23835474e-01,
         1.53278157e-01, -5.79331934e-01, -4.66145086e+00,
         1.83903828e-01},
                         { 2.38426492e-01, -9.16174293e-01, -7.38907605e-02,
         2.47204676e-01, -1.12088144e+00,  1.10634034e-02,
        -2.31321186e-01,  8.37104797e-01,  1.40236235e+00,
        -4.62082028e-01,  5.02977848e-01,  9.49612916e-01,
        -1.02918610e-01, -1.49485976e-01, -3.71294804e-02,
        -1.74975514e-01, -1.12852104e-01,  1.55147624e+00,
         6.91788852e-01, -3.90361935e-01,  6.65787697e-01,
         3.05462569e-01, -4.95255068e-02,  1.06481624e+00,
        -5.35183549e-01},
                         { 1.41458083e-02, -8.67053121e-02,  9.64073241e-02,
         1.09618828e-01, -4.77306992e-01,  3.94042075e-01,
        -1.14950471e-01,  1.53527781e-01, -3.83409947e-01,
        -7.85161257e-02, -1.42796233e-01,  1.93828568e-01,
         1.38530016e-01, -2.81195849e-01, -3.74470294e-01,
        -2.72195607e-01,  2.20787331e-01,  1.29464626e-01,
        -8.02201629e-02, -2.69317806e-01, -9.84419212e-02,
        -2.27821078e-02,  3.44365060e-01, -1.16029091e-01,
        -2.64703423e-01},
                         { 1.34766623e-01, -1.20991111e-01,  3.34724449e-02,
         2.52914941e-03, -2.64777929e-01, -5.95522344e-01,
         2.02603519e-01,  2.52085376e+00,  1.54131398e-01,
        -2.38074616e-01, -2.99706340e-01, -3.87100488e-01,
         8.84682834e-02,  2.08000019e-02,  2.53582150e-01,
         1.43774495e-01,  1.25045046e-01,  9.86071169e-01,
         1.23701036e+00,  3.03617697e-02, -7.91082799e-01,
        -9.10492659e-01,  3.13831009e-02,  9.40986633e-01,
        -3.91976088e-02},
                         { -8.52880836e-01, -2.07762122e+00,  7.52113312e-02,
        -7.94570148e-01, -2.56566978e+00, -9.77750242e-01,
        -1.78293657e+00, -1.84843206e+00,  8.91944349e-01,
        -2.68682528e+00, -1.20821452e+00, -1.17794383e+00,
         2.17927154e-02,  8.00469592e-02, -1.40710032e+00,
        -2.27121357e-02, -2.92495675e-02,  1.74025357e+00,
        -2.06107426e+00, -2.13884622e-01, -1.48232937e+00,
        -1.28392088e+00,  6.42110556e-02,  1.60953689e+00,
        -2.14838243e+00},
                         { 8.48823369e-01,  4.13941002e+00, -1.52600658e+00,
         9.38794792e-01,  4.20865107e+00, -2.36518168e+00,
         1.36534548e+00,  1.10957408e+00,  2.34171724e+00,
         2.68750978e+00, -1.16822088e+00, -1.36754704e+00,
        -1.67394173e+00, -9.72189844e-01,  6.86267376e-01,
        -1.81671715e+00, -1.44346881e+00, -1.66840270e-01,
         4.96791458e+00, -4.65554669e-02, -2.15520740e-01,
        -6.10621035e-01, -1.80306494e+00,  2.81385243e-01,
         3.48979092e+00},

};


   for (iii = 0; iii < n2; iii++) {
        for (jjj = 0; jjj < m3; jjj++) {
            out2[iii][jjj] = 0;
            for (kkk = 0; kkk < m2; kkk++)
                out2[iii][jjj] += final_out1[iii][kkk] * mat3[kkk][jjj]; 
        }
    }

       


typedef double b3[1][b3];
const b3 bias3 = {  
{ -0.86310875, -0.10558602, -0.05318763, -0.9552186 , -0.06682722,
        0.03488874, -0.83348477, -0.64578617,  0.09875579, -0.4013883 ,
        0.03498227,  0.04505071,  0.0132815 , -0.12420791, -0.85949373,
        0.01071038, -0.00788814,  0.04645443, -0.01039787, -0.10380992,
        0.02596321,  0.06262553, -0.01339111,  0.01374992, -0.13579182}, 
    };



                for(x2=0; x2<out_r2; ++x2) {
                    for(v2=0; v2<out_c2; ++v2){
                            temp2=out2[x2][v2] + bias3[x2][v2]; 
 

                        final_out2[x2][v2]=max(q,temp2);
                    }
            }


   for (iiii = 0; iiii < n3; iiii++) {
        for (jjjj = 0; jjjj < m4; jjjj++) {
            out3[iiii][jjjj] = 0;
            for (kkkk = 0; kkkk < m3; kkkk++){

mat4[0][0]=  -3.3785832e+00  ;
mat4[0][1]=   -9.1135554e-02  ;
mat4[0][2]=   -4.0014505e+00  ;
mat4[0][3]=   4.0341458e+00  ;
mat4[0][4]=    5.7558980e+00  ;
mat4[0][5]=   4.5396242e+00  ;
mat4[0][6]=    4.8423505e+00  ;
mat4[0][7]=   6.4640832e+00  ;
mat4[0][8]=   6.9754348e+00  ;
mat4[0][9]=     -4.0556526e+00;
mat4[0][10]=    -1.1052726e-01 ;
mat4[0][11]=    -3.2438195e+00 ;
mat4[0][12]=   4.4186239e+00  ;
mat4[0][13]=     5.0101280e+00 ;
mat4[0][14]=    -3.3678532e+00 ;
mat4[0][15]=   2.8183925e-01  ;
mat4[0][16]=    5.3808212e+00 ;
mat4[0][17]=    -2.2414407e-01 ;
mat4[0][18]=   -3.8525810e+00  ;
mat4[0][19]=    -3.2130616e+00 ;

mat4[1][0]=  -1.2241553e+00   ;
mat4[1][1]=   6.0587966e-01   ;
mat4[1][2]=   -1.3091642e+00  ;
mat4[1][3]=   1.4428777e+00  ;
mat4[1][4]=   1.7644593e+00  ;
mat4[1][5]=     6.6794622e-01 ;
mat4[1][6]=    6.1581630e-01 ;
mat4[1][7]=     2.4986408e+00 ;
mat4[1][8]=    3.0527046e+00 ;
mat4[1][9]=    -1.7100886e+00 ;
mat4[1][10]=    1.0848160e+00 ;
mat4[1][11]=   -1.5303446e+00  ;
mat4[1][12]=    1.1052351e+00 ;
mat4[1][13]=    1.3680123e+00 ;
mat4[1][14]=   -1.0916045e+00  ;
mat4[1][15]=   3.1195142e+00 ;
mat4[1][16]=   1.4693182e+00  ;
mat4[1][17]=   -4.3553716e-01  ;
mat4[1][18]=     -1.2891014e+00;
mat4[1][19]=    -1.6900247e+00 ;


mat4[2][0]= 1.4375718e+00    ;
mat4[2][1]=  5.7273942e-01   ;
mat4[2][2]=   -4.4365302e-01  ;
mat4[2][3]=    2.2158954e-01  ;
mat4[2][4]=    -1.0063357e-02 ;
mat4[2][5]=    -6.7078896e-02 ;
mat4[2][6]=     -1.4114545e-01;
mat4[2][7]=     -2.2076973e-01 ;
mat4[2][8]= -1.1941920e-01    ;
mat4[2][9]=  1.0152134e-01   ;
mat4[2][10]=    3.5356942e-01  ;
mat4[2][11]=    1.9486028e+00 ;
mat4[2][12]=    1.1171284e-01 ;
mat4[2][13]=    -1.0645981e+00 ;
mat4[2][14]=    1.1926628e+00 ;
mat4[2][15]=    2.7654562e-02 ;
mat4[2][16]=    -1.0275367e+00 ;
mat4[2][17]=    4.4517139e-01 ;
mat4[2][18]=    1.4024574e+00 ;
mat4[2][19]=    1.4796226e+00 ;


mat4[3][0]=   -3.4005733e+00  ;
mat4[3][1]=   -1.5396339e-01  ;
mat4[3][2]= -3.4219482e+00    ;
mat4[3][3]=   4.0083890e+00  ;
mat4[3][4]=    4.8702850e+00 ;
mat4[3][5]=    4.1372123e+00 ;
mat4[3][6]=    4.2773027e+00 ;
mat4[3][7]=    5.4816051e+00 ;
mat4[3][8]=     5.5982108e+00;
mat4[3][9]=     -3.9918616e+00;
mat4[3][10]=    5.4090363e-01 ;
mat4[3][11]=    -2.8539412e+00 ;
mat4[3][12]=    3.2542527e+00 ;
mat4[3][13]=    4.7737451e+00 ;
mat4[3][14]=    -3.2209342e+00 ;
mat4[3][15]=    7.0504087e-01 ;
mat4[3][16]=   4.6247015e+00  ;
mat4[3][17]=    1.7557642e-01 ;
mat4[3][18]=    -3.1490591e+00 ;
mat4[3][19]=    -3.1204772e+00 ;


mat4[4][0]=   -1.4593704e+00  ;
mat4[4][1]=   -2.5829559e-02  ;
mat4[4][2]=   -1.5653465e+00  ;
mat4[4][3]=    1.6306853e+00 ;
mat4[4][4]=     2.4894960e+00;
mat4[4][5]=    7.1437514e-01 ;
mat4[4][6]=     1.2476532e+00 ;
mat4[4][7]=      2.8477938e+00;
mat4[4][8]=    3.1618743e+00 ;
mat4[4][9]=     -2.2958617e+00;
mat4[4][10]=     1.4538574e+00;
mat4[4][11]=    -1.3395588e+00 ;
mat4[4][12]=    1.4596292e+00 ;
mat4[4][13]=    1.3102704e+00 ;
mat4[4][14]=    -1.4530255e+00 ;
mat4[4][15]=    3.6185186e+00 ;
mat4[4][16]=     1.5798676e+00;
mat4[4][17]=    -2.3254912e-01 ;
mat4[4][18]=     -1.6025624e+00;
mat4[4][19]=    -1.5575025e+00 ;

mat4[5][0]=    -8.2246438e-03 ;
mat4[5][1]=    -3.2854540e+00 ;
mat4[5][2]=   -1.0228715e-02  ;
mat4[5][3]=     1.0860179e-01 ;
mat4[5][4]=     5.9843993e-01;
mat4[5][5]=     5.9852980e-02 ;
mat4[5][6]=    -1.5505529e-02 ;
mat4[5][7]=    6.0221964e-01 ;
mat4[5][8]=     7.7808964e-01;
mat4[5][9]=    -2.2122057e-02 ;
mat4[5][10]=    -3.0343184e+00 ;
mat4[5][11]=     2.4964837e-02;
mat4[5][12]=     9.4208425e-01;
mat4[5][13]=    -6.5329090e-02;
mat4[5][14]=    -2.7632370e+00;
mat4[5][16]=     -8.4709711e-02;
mat4[5][17]=    -2.2638028e+00;
mat4[5][18]=    4.5081452e-02 ;
mat4[5][19]=    4.3707743e-02 ;


mat4[6][0]=    -2.2353923e+00 ;
mat4[6][1]=    2.3594259e-01 ;
mat4[6][2]=    -2.5445082e+00;
mat4[6][3]=     2.7041686e+00 ;
mat4[6][4]=   3.5377736e+00  ;
mat4[6][5]=     2.8262584e+00;
mat4[6][6]=    2.8328059e+00 ;
mat4[6][7]=     4.1682301e+00;
mat4[6][8]=    4.7717957e+00 ;
mat4[6][9]=    -2.8121243e+00 ;
mat4[6][10]=     6.5530002e-01 ;
mat4[6][11]=    -2.4818602e+00 ;
mat4[6][12]=    2.6203580e+00 ;
mat4[6][13]=    3.4895792e+00 ;
mat4[6][14]=    -2.6237049e+00 ;
mat4[6][15]=    2.4836898e+00 ;
mat4[6][16]=    3.1007047e+00 ;
mat4[6][17]=    -1.4914903e-01 ;
mat4[6][18]=    -2.7507491e+00 ;
mat4[6][19]=    -2.6096773e+00 ;


mat4[7][0]=   -2.6358514e+00  ;
mat4[7][1]=   -7.9927474e-01  ;
mat4[7][2]=   -2.4832425e+00  ;
mat4[7][3]=    2.8632078e+00 ;
mat4[7][4]=    3.2847176e+00 ;
mat4[7][5]=     3.2861071e+00;
mat4[7][6]=     3.3173571e+00;
mat4[7][7]=    3.5520027e+00 ;
mat4[7][8]=    4.2018862e+00 ;
mat4[7][9]=    -2.5074818e+00 ;
mat4[7][10]=    6.3175589e-01;
mat4[7][11]=     -2.3482471e+00;
mat4[7][12]=     2.7288144e+00;
mat4[7][13]=    3.7880218e+00 ;
mat4[7][14]=    -2.5854554e+00 ;
mat4[7][15]=     3.2678034e+00;
mat4[7][16]=     3.0960252e+00;
mat4[7][17]=    -6.0979515e-01 ;
mat4[7][18]=     -2.8629458e+00;
mat4[7][19]=    -2.8601029e+00 ;


mat4[8][0]=  -5.4835367e-01  ;
mat4[8][1]=   9.3791914e-01  ;
mat4[8][2]=    -1.4431077e+00 ;
mat4[8][3]=    1.2989426e+00 ;
mat4[8][4]=    -1.5901140e+00 ;
mat4[8][5]=    8.6308964e-02 ;
mat4[8][6]=     5.9955275e-01;
mat4[8][7]=    1.7770977e-01 ;
mat4[8][8]=     -3.4477848e-01 ;
mat4[8][9]=    -2.7074468e+00 ;
mat4[8][10]=    6.2000161e-01 ;
mat4[8][11]=    -1.6596591e+00 ;
mat4[8][12]=    -7.9380912e-01 ;
mat4[8][13]=    5.2880472e-01 ;
mat4[8][14]=    -6.2054282e-01 ;
mat4[8][15]=    -7.2709188e-02 ;
mat4[8][16]=     6.7002237e-02 ;
mat4[8][17]=     6.3534182e-01 ;
mat4[8][18]=    -6.1669028e-01 ;
mat4[8][19]=    -4.6658045e-01 ;



mat4[9][0]=    -1.3810877e+00 ;
mat4[9][1]=   -8.6180761e-02  ;
mat4[9][2]=   -1.5309100e+00  ;
mat4[9][3]=     1.0241877e+00 ;
mat4[9][4]=    2.4887798e+00 ;
mat4[9][5]=     1.5644464e+00;
mat4[9][6]=    1.9720417e+00 ;
mat4[9][7]=     3.2361944e+00;
mat4[9][8]=    3.4132538e+00 ;
mat4[9][9]=    -2.2014821e+00 ;
mat4[9][10]=     1.0868154e+00;
mat4[9][11]=    -1.5929561e+00 ;
mat4[9][12]=     1.9492275e+00;
mat4[9][13]=     1.1956636e+00;
mat4[9][14]=     1.5580264e+00;
mat4[9][15]=    2.6716676e+00 ;
mat4[9][16]=     1.4314464e+00;
mat4[9][17]=    -6.5112305e-01 ;
mat4[9][18]=    -1.4540107e+00 ;
mat4[9][19]=    -1.6785442e+00 ;


mat4[10][0]=   -5.2343145e-02  ;
mat4[10][1]=   -2.7513132e+00  ;
mat4[10][2]=    -2.3365092e-02 ;
mat4[10][3]=   -6.7833193e-02  ;
mat4[10][4]=    1.0453324e+00 ;
mat4[10][5]=    -1.6938157e-02 ;
mat4[10][6]=     7.7812202e-02 ;
mat4[10][7]=     1.0711263e+00;
mat4[10][8]=    9.3399650e-01 ;
mat4[10][9]=    2.1582225e-02 ;
mat4[10][10]=    -2.2434001e+00 ;
mat4[10][11]=    -3.1599727e-02 ;
mat4[10][12]=    1.0481249e+00  ;
mat4[10][13]=    -2.8186515e-01 ;
mat4[10][14]=    -3.4190163e-02 ;
mat4[10][15]=    -2.0312104e+00 ;
mat4[10][16]=    -1.4370629e-02 ;
mat4[10][17]=    -2.9104073e+00 ;
mat4[10][18]=    -6.9675967e-02 ;
mat4[10][19]=    1.7385292e-03 ;


mat4[11][0]= 6.3300133e-03    ;
mat4[11][1]=   -3.0515468e+00  ;
mat4[11][2]=    7.7595334e-03 ;
mat4[11][3]=    -1.1117829e-02 ;
mat4[11][4]=    9.8704582e-01 ;
mat4[11][5]=    1.0690811e-01 ;
mat4[11][6]=    -4.4393454e-02 ;
mat4[11][7]=     7.1273708e-01;
mat4[11][8]=    8.0000085e-01 ;
mat4[11][9]=    7.8494951e-02 ;
mat4[11][10]=    -2.7017984e+00 ;
mat4[11][11]=    -2.6569379e-02 ;
mat4[11][12]=    8.4648937e-01 ;
mat4[11][13]=    -3.9611802e-02 ;
mat4[11][14]=    -2.1309255e-02 ;
mat4[11][15]=    -2.0918407e+00 ;
mat4[11][16]=    1.6080497e-02 ;
mat4[11][17]=    -2.4431751e+00 ;
mat4[11][18]=    3.3204727e-02 ;
mat4[11][19]=    2.0419568e-02 ;


mat4[12][0]=  7.6636076e-01   ;
mat4[12][1]=   3.9699057e-01  ;
mat4[12][2]=    -6.2602991e-01 ;
mat4[12][3]=   6.6681778e-01  ;
mat4[12][4]=     -4.6230920e-02;
mat4[12][5]=    2.2611997e-01 ;
mat4[12][6]=     -8.6068869e-02;
mat4[12][7]=    -5.1692694e-01 ;
mat4[12][8]=   -7.7560186e-02  ;
mat4[12][9]=    -9.0720153e-01 ;
mat4[12][10]=    4.4017258e-01 ;
mat4[12][11]=   1.2800857e+00  ;
mat4[12][12]=    -4.7380220e-02 ;
mat4[12][13]=    -1.5615932e+00 ;
mat4[12][14]=    9.4738144e-01 ;
mat4[12][15]=     1.6701373e-01;
mat4[12][16]=    -1.6429703e+00 ;
mat4[12][17]=     5.2419698e-01 ;
mat4[12][18]=    5.3675419e-01 ;
mat4[12][19]=    8.8563544e-01 ;


mat4[13][0]=   1.1427063e+00  ;
mat4[13][1]=   5.6991351e-01  ;
mat4[13][2]=    -2.4788165e+00 ;
mat4[13][3]=    1.1423832e+00 ;
mat4[13][4]=    -7.8450072e-01 ;
mat4[13][5]=    -6.1696899e-01 ;
mat4[13][6]=    -8.7362427e-01 ;
mat4[13][7]=    -1.1531386e+00 ;
mat4[13][8]=    -8.4927547e-01 ;
mat4[13][9]=    -2.1178365e+00 ;
mat4[13][10]=    1.3188195e+00 ;
mat4[13][11]=    7.7840644e-01 ;
mat4[13][12]=   -9.8738998e-01  ;
mat4[13][13]=   -1.9753323e+00  ;
mat4[13][14]=    9.9094957e-01 ;
mat4[13][15]=     6.2495488e-01 ;
mat4[13][16]=    -2.6106012e+00 ;
mat4[13][17]=    1.5642062e+00 ;
mat4[13][18]=   8.9732051e-01 ;
mat4[13][19]=    7.7116293e-01;


mat4[14][0]=   -2.9884388e+00  ;
mat4[14][1]=    4.1333696e-01 ;
mat4[14][2]=    -3.6280985e+00 ;
mat4[14][3]=    4.0465078e+00 ;
mat4[14][4]=    4.5166569e+00 ;
mat4[14][5]=     4.4085908e+00;
mat4[14][6]=    4.4536657e+00 ;
mat4[14][7]=     5.3447819e+00;
mat4[14][8]=    6.0594964e+00 ;
mat4[14][9]=     -3.6522629e+00;
mat4[14][10]=     2.7829099e-01;
mat4[14][11]=    -3.1741843e+00 ;
mat4[14][12]=     3.6608083e+00;
mat4[14][13]=    4.0572591e+00 ;
mat4[14][14]=    -3.2181106e+00 ;
mat4[14][15]=    1.2571559e+00 ;
mat4[14][16]=     4.0919504e+00 ;
mat4[14][17]=    -1.4104731e-01 ;
mat4[14][18]=    -3.2592702e+00 ;
mat4[14][19]=     -3.4568319e+00;


mat4[15][0]= 4.8135293e-01    ;
mat4[15][1]=   2.0582253e-01 ;
mat4[15][2]=   -9.0727895e-01  ;
mat4[15][3]=  5.4688334e-01    ;
mat4[15][4]=  -1.5839440e-01  ;
mat4[15][5]=   -2.8121731e-01 ;
mat4[15][6]=    -2.2810943e-01 ;
mat4[15][7]=    -6.6104519e-01 ;
mat4[15][8]=    -1.4784668e-01;
mat4[15][9]=    -1.0410932e+00 ;
mat4[15][10]=    1.6753379e-01 ;
mat4[15][11]=     1.4409127e+00;
mat4[15][12]=    -2.5265646e-01 ;
mat4[15][13]=   -1.8064739e+00 ;
mat4[15][14]=   5.9294432e-01 ;
mat4[15][15]=    2.3184398e-01 ;
mat4[15][16]=     -2.2296607e+00;
mat4[15][17]=   3.3936423e-01  ;
mat4[15][18]=    7.4935293e-01;
mat4[15][19]=   8.9081341e-01 ;


mat4[16][0]=  6.0065913e-01   ;
mat4[16][1]=   2.8828877e-01  ;
mat4[16][2]=   -1.0280415e+00  ;
mat4[16][3]=   4.6165204e-01  ;
mat4[16][4]=     1.9754225e-02 ;
mat4[16][5]=    -3.1210631e-01 ;
mat4[16][6]=     -1.6973299e-01;
mat4[16][7]=     -7.5614661e-01;
mat4[16][8]=    -1.2249075e-01 ;
mat4[16][9]= -1.3198476e+00    ;
mat4[16][10]= 4.2578667e-01    ;
mat4[16][11]=    1.7403973e+00 ;
mat4[16][12]=   -2.7554524e-01  ;
mat4[16][13]=    -1.7938896e+00 ;
mat4[16][14]=    1.1171490e+00 ;
mat4[16][15]=    2.8348115e-01 ;
mat4[16][16]=    -2.8068032e+00 ;
mat4[16][17]=    6.0782677e-01 ;
mat4[16][18]=     5.8349079e-01;
mat4[16][19]=    1.3434327e+00 ;


mat4[17][0]=  -2.0664890e-01   ;
mat4[17][1]=   4.8112443e-01  ;
mat4[17][2]=   -5.4633265e+00  ;
mat4[17][3]=   2.2750065e+00  ;
mat4[17][4]=    -1.8296428e+00 ;
mat4[17][5]=    3.7557993e-02 ;
mat4[17][6]=    2.8684440e-01 ;
mat4[17][7]=   -2.9515326e-01  ;
mat4[17][8]=    -9.7730649e-01 ;
mat4[17][9]=    -4.4834375e+00 ;
mat4[17][10]=    1.3941263e+00 ;
mat4[17][11]=   -3.3362961e-01  ;
mat4[17][12]=    -1.4674846e+00 ;
mat4[17][13]=    2.2817782e-01 ;
mat4[17][14]=    -1.7615202e-01 ;
mat4[17][15]=    1.5519537e+00 ;
mat4[17][16]=   4.9612779e-02  ;
mat4[17][17]=    1.1003497e+00 ;
mat4[17][18]=    -1.5142716e-01 ;
mat4[17][19]=   -2.4710345e-01  ;


mat4[18][0]=  -7.0739579e-01   ;
mat4[18][1]=  4.9529083e-02   ;
mat4[18][2]=  -7.8355700e-01   ;
mat4[18][3]=   1.5351312e+00  ;
mat4[18][4]=   1.9854355e+00  ;
mat4[18][5]=   1.8683257e+00  ;
mat4[18][6]=    1.7036839e+00 ;
mat4[18][7]=    1.1522636e+00 ;
mat4[18][8]=     1.7542603e+00 ;
mat4[18][9]=    -4.9011031e-01 ;
mat4[18][10]=     5.3461361e-01 ;
mat4[18][11]=    -9.0221721e-01 ;
mat4[18][12]=    1.6103005e+00 ;
mat4[18][13]=    1.1365306e+00 ;
mat4[18][14]=   -1.3400310e+00 ;
mat4[18][15]=     2.6531808e+00 ;
mat4[18][16]=   7.1747512e-01  ;
mat4[18][17]=    -4.4737837e-01 ;
mat4[18][18]=    -1.1704018e+00 ;
mat4[18][19]=    -1.3727210e+00 ;


mat4[19][0]=   -7.8455009e-02  ;
mat4[19][1]=   -2.8092527e-01  ;
mat4[19][2]=    1.2167994e-01 ;
mat4[19][3]=    -8.2329981e-02 ;
mat4[19][4]=   3.8393191e-01  ;
mat4[19][5]=     1.2231090e-01 ;
mat4[19][6]=    3.5165662e-01 ;
mat4[19][7]=    -5.0082904e-01 ;
mat4[19][8]=    4.0780045e-02 ;
mat4[19][9]=     -1.9598681e-01;
mat4[19][10]=     1.0994632e-01;
mat4[19][11]=    -3.0477050e-01 ;
mat4[19][12]=    1.4484896e-01 ;
mat4[19][13]=    -2.2822791e-01 ;
mat4[19][14]=    -1.7814121e-01 ;
mat4[19][15]=    -4.1809613e-03 ;
mat4[19][16]=    5.6671076e-02 ;
mat4[19][17]=    -2.0469497e-01 ;
mat4[19][18]=    3.2051486e-01 ;
mat4[19][19]=    4.9989480e-01 ;


mat4[20][0]=  -3.0534487e-02   ;
mat4[20][1]=   -2.8350744e+00  ;
mat4[20][2]=     3.4638951e-03 ;
mat4[20][3]=    -1.1158465e-01 ;
mat4[20][4]=    8.4042412e-01 ;
mat4[20][5]=    1.0572226e-01 ;
mat4[20][6]=    7.0216968e-03 ;
mat4[20][7]=     1.2366012e+00 ;
mat4[20][8]=    8.2811242e-01 ;
mat4[20][9]=     5.0506931e-02;
mat4[20][10]=     -2.3915396e+00;
mat4[20][11]=    -7.9506949e-02 ;
mat4[20][12]=      7.0991999e-01;
mat4[20][13]=    -9.5651476e-03 ;
mat4[20][14]=    -6.7671396e-02 ;
mat4[20][15]=    -1.3654660e+00 ;
mat4[20][16]=    1.0950425e-01 ;
mat4[20][17]=   -2.4078207e+00 ;
mat4[20][18]=    -8.6801596e-02 ;
mat4[20][19]=    -5.1521897e-02 ;


mat4[21][0]= -3.3409854e-03    ;
mat4[21][1]=   -3.3904948e+00  ;
mat4[21][2]=   -5.9692062e-02  ;
mat4[21][3]=    6.8371132e-02 ;
mat4[21][4]=     7.3562610e-01;
mat4[21][5]=   1.6789661e-03 ;
mat4[21][6]=    -9.1914371e-02 ;
mat4[21][7]=    8.7166739e-01 ;
mat4[21][8]=    6.7625058e-01 ;
mat4[21][9]=    4.7202021e-02 ;
mat4[21][10]=    -2.0586491e+00 ;
mat4[21][11]=    -8.6870521e-02 ;
mat4[21][12]=      7.9209524e-01;
mat4[21][13]=    -1.0719537e-01 ;
mat4[21][14]=    7.4523208e-03 ;
mat4[21][15]=    -1.2816000e+00 ;
mat4[21][16]=     1.8061517e-01;
mat4[21][17]=    -2.4874005e+00 ;
mat4[21][18]=    -5.9535023e-02 ;
mat4[21][19]=    -3.7162799e-02 ;


mat4[22][0]=  1.0486367e+00   ;
mat4[22][1]=   6.1793592e-02  ;
mat4[22][2]=   -2.2939949e-01  ;
mat4[22][3]=    1.5108465e-01 ;
mat4[22][4]=    1.4176331e-01 ;
mat4[22][5]=    -1.7396864e-01 ;
mat4[22][6]=     -4.4311729e-01;
mat4[22][7]=     -4.7964078e-01;
mat4[22][8]=    9.7558782e-02 ;
mat4[22][9]=     -3.1162569e-01;
mat4[22][10]=    -7.9537056e-02 ;
mat4[22][11]= 1.4781736e+00    ;
mat4[22][12]=   1.9998426e-02  ;
mat4[22][13]=    -4.9481887e-01 ;
mat4[22][14]=    1.2350972e+00 ;
mat4[22][15]=     -3.1113401e-01;
mat4[22][16]=    -5.7059985e-01 ;
mat4[22][17]=    -1.2496067e-01 ;
mat4[22][18]=    1.1473978e+00 ;
mat4[22][19]=    1.4954718e+00 ;


mat4[23][0]=  -1.6680463e-01   ;
mat4[23][1]=    1.2393553e+00 ;
mat4[23][2]=    -6.3247495e+00 ;
mat4[23][3]=    3.4980106e+00 ;
mat4[23][4]=    -1.9502608e+00 ;
mat4[23][5]=    9.5551294e-01 ;
mat4[23][6]=     8.6747622e-01;
mat4[23][7]=    -1.2695953e+00 ;
mat4[23][8]=    -1.4731119e+00 ;
mat4[23][9]=   -5.2494264e+00  ;
mat4[23][10]=    2.9345741e+00 ;
mat4[23][11]=    -5.6142473e-01 ;
mat4[23][12]=    -1.9329171e+00 ;
mat4[23][13]=    -1.2450859e-01 ;
mat4[23][14]=    -3.0601168e-01 ;
mat4[23][15]=     2.8800194e+00;
mat4[23][16]=    -5.9620297e-01 ;
mat4[23][17]=    1.4507614e+00 ;
mat4[23][18]=    -3.4140748e-01 ;
mat4[23][19]=     -2.5537372e-01;


mat4[24][0]= -1.6106063e+00    ;
mat4[24][1]=  4.1922033e-01   ;
mat4[24][2]=   1.3410380e+00 ;
mat4[24][4]=    1.7010387e+00 ;
mat4[24][5]=    1.1825827e+00 ;
mat4[24][6]=    1.4867985e+00 ;
mat4[24][7]=    2.7713709e+00 ;
mat4[24][8]=    2.6540563e+00 ;
mat4[24][9]=     -1.8729700e+00;
mat4[24][10]=    1.3763525e+00 ;
mat4[24][11]=    -1.6946329e+00 ;
mat4[24][12]=     1.6183698e+00 ;
mat4[24][13]=    2.0030284e+00 ;
mat4[24][14]=     -1.6629416e+00;
mat4[24][15]=    3.1487675e+00 ;
mat4[24][16]=    1.4467138e+00 ;
mat4[24][17]=    -6.9009453e-01 ;
mat4[24][18]=     -1.4078368e+00;
mat4[24][19]=    -1.6767563e+00 ;





               out3[iiii][jjjj] += final_out2[iiii][kkkk] * mat4[kkkk][jjjj];

}  
        }

    }



typedef double b4[1][b4];
const b4 bias4 = {  
 { 0.38454196, -0.03476018,  0.34957293, -0.18655577,  0.00608996,
       -0.25293845, -0.4244002 , -0.00153763,  0.0377132 ,  0.22602928,
        0.04460638,  0.34406963, -0.03496111,  0.1409825 ,  0.34956762,
        0.0974592 ,  0.19158842,  0.05997501,  0.40131775,  0.35486525}, 
    };


              for(c2=0; c2<out_r3; ++c2) {
                    for(d2=0; d2<out_c3; ++d2){
                            temp3=out3[c2][d2] + bias4[c2][d2]; 
 

                        final_out3[c2][d2]=max(q,temp3);
                    }
            }




typedef double Matrix5[i5][j5];
//Layer 5 inputs:
const Matrix5 mat5 = {
         { -3.397903  ,  0.48899266,  0.54437953},
                         { 0.4800371 , -2.1393416 ,  0.76508605},
                         { -2.9369056 ,  2.2216196 , -1.4280993},
                         {  0.50615513, -0.9578552 ,  0.27471796},
                         { 0.53926605,  0.48491237, -4.4322076},
                         { 1.2026049 , -1.3717997 , -1.9702238},
                         {  1.093734  , -1.0572164 , -2.3446858},
                         { 0.6797404 ,  0.5242383 , -4.1886764},
                         { 0.6732946 ,  0.43706116, -4.3283453},
                         { -2.6922166 ,  2.687112  , -3.338688},
                         { 0.80888367, -0.9815605 ,  0.6641961},
                         { -4.400408  , -0.05352254,  0.1879516},
                         { 0.12480958,  0.05529841, -4.2206717},
                         { 1.4433136 , -0.2961512 , -1.946111},
                         { -2.914137  ,  0.36097467,  0.5379105},
                         { 1.069314  , -1.1156301 ,  0.71991885},
                         { 1.1313562 ,  0.15077055, -3.8260403},
                         {  0.4947726 , -0.81078464,  0.7254029 },
                         { -3.0585864 ,  0.1658202 ,  0.38355446},
                         { -2.87181   ,  0.08463228,  0.3662445},

};



 for (iiiii = 0; iiiii < n4; iiiii++) {
        for (jjjjj = 0; jjjjj < m5; jjjjj++) {
            out4[iiiii][jjjjj] = 0;
            for (kkkkk = 0; kkkkk < m4; kkkkk++)
         out4[iiiii][jjjjj] += final_out3[iiiii][kkkkk] * mat5[kkkkk][jjjjj]; 
        }
    }


typedef double b5[1][b5];
const b5 bias5 = {  
 { -1.7089224 ,  0.9418747 , -0.16110843}, 
    };



              for(f2=0; f2<out_r4; ++f2) {
                    for(g2=0; g2<out_c4; ++g2){
                            temp4=out4[f2][g2] + bias5[f2][g2]; 
                        final_out4[f2][g2]=max(q,temp4);
                    }
            }


 std::cout << "Layer5 final output: " <<"\n" <<std::endl;
  int p10,o10;
      for(p10=0; p10<1; ++p10) {
         for(o10=0; o10<3; ++o10)
         cout<< final_out4[p10][o10]<<" ";
         cout<<"\n"<<endl;}



if(  (final_out4[0][0]>=final_out4[0][1]) && final_out4[0][0]>=final_out4[0][2]){

             NN_output=0;
cout<<"  The final output of the neural network is: "<< NN_output <<endl;


}else if ((final_out4[0][1]>final_out4[0][0]) && final_out4[0][1]>=final_out4[0][2]) {

              NN_output=1;
cout<<" The final output of the neural network is: "<< NN_output <<endl;



}else  {

             NN_output=2;
cout<<"  The final output of the neural network is: "<< NN_output <<endl;


}



if  ((NN_output==0) && (tmp >= 0.95) ) {

                  segCwnd=segCwnd + 50;
                  tcb->m_cWnd = segCwnd * tcb->m_segmentSize;


} else if ((NN_output==0) && (tmp < 0.95)&& (tmp >0.8)){
                  segCwnd=segCwnd + 5 ;
                  tcb->m_cWnd = segCwnd * tcb->m_segmentSize;



} else if ((NN_output==0) && (tmp < 0.8)){
                  segCwnd=segCwnd;
                  tcb->m_cWnd = segCwnd * tcb->m_segmentSize;


} 



else if ((NN_output==1) && (tmp >= 0.7)){
                  segCwnd=segCwnd;
                  tcb->m_cWnd = segCwnd * tcb->m_segmentSize;



} else if ((NN_output==1) && (tmp < 0.7) && (tmp >= 0.3)){
                  segCwnd=segCwnd - 5;
                  tcb->m_cWnd = segCwnd * tcb->m_segmentSize;


} else if ((NN_output==1) && (tmp < 0.3)){
                  segCwnd=segCwnd - 10;
                  tcb->m_cWnd = segCwnd * tcb->m_segmentSize;



}

 else if ((NN_output==2) && (tmp >= 0.6)){
                  segCwnd=segCwnd - 10;
                  tcb->m_cWnd = segCwnd * tcb->m_segmentSize;


}else if ((NN_output==2) && (tmp < 0.6)){
                  segCwnd=segCwnd/2;
                  tcb->m_cWnd = segCwnd * tcb->m_segmentSize;


}else {
                  std::cout <<"None of the protocols conditions." << std::endl;
}


   std::cout << "cwnd number = " <<   segCwnd << std::endl;
                  




}






          tcb->m_ssThresh = std::max (tcb->m_ssThresh, 3 * tcb->m_cWnd / 4);
          NS_LOG_DEBUG ("Updated ssThresh = " << tcb->m_ssThresh);
        } 



      // Reset cntRtt & minRtt every RTT
      m_cntRtt = 0;
      m_minRtt = Time::Max ();


    } 





}

std::string
Tcpdeep::GetName () const
{
  return "Tcpdeep";
}


uint32_t
Tcpdeep::GetSsThresh (Ptr<const TcpSocketState> tcb,
                       uint32_t bytesInFlight)
{
  NS_LOG_FUNCTION (this << tcb << bytesInFlight);


 return std::max (std::min (tcb->m_ssThresh.Get (), tcb->m_cWnd.Get () - tcb->m_segmentSize), 2 * tcb->m_segmentSize);
}

} // namespace ns3
